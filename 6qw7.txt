
create a folder and open in vscode

create all these files App.css:

@import 'https://fonts.googleapis.com/css?family=Share+Tech+Mono';
body {
  background: #EBEBEB;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
  font-family: 'Share Tech Mono';
}

.App {
  height: 400px;
  width: 300px;
  perspective: 0 200px;
  background: #EBEBEB;
  transform: scale(0.8) skew(20deg);
  transition: transform .5s ease .5s;
  position: relative;
}

.App:hover {
  transform: scale(1.5) skew(0deg);
  transition: transform .6s;
}

.App::after {
  position: absolute;
  content: '';
  background: #d7ddd3;
  width: 10px;
  height: 100%;
  bottom: 0;
  left: 100%;
  transform: skewY(45deg);
  transform-origin: 0 100%;
  perspective: 0 200px;
  opacity: 1;
  transition: transform .5s ease .5s, width .5s ease .5s, opacity .5s ease .5s;
  border-top-right-radius: 5px;
  border-bottom-right-radius: 1px;
}

.Display {
  background: #2B293D;
  color: #59C3C3;
  text-shadow: 0 0 5px rgba(89, 195, 195, 0.5);
  display: flex;
  justify-content: flex-end;
  align-items: center;
  padding: 0 29px;
  box-sizing: border-box;
  height: 20%;
  overflow: hidden;
  font-size: 24px;
  position: relative;
}

.Buttons {
  display: flex;
  flex-wrap: wrap;
  flex-direction: column;
  height: 80%;
}

.Button {
  background: #cad2c5;
  background: -moz-linear-gradient(45deg, #cad2c5 0%, #abb5aa 100%);
  background: -webkit-linear-gradient(45deg, #cad2c5 0%, #abb5aa 100%);
  background: linear-gradient(45deg, #cad2c5 0%, #abb5aa 100%);
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#cad2c5', endColorstr='#abb5aa', GradientType=1);
  display: flex;
  box-sizing: border-box;
  border: 1px solid rgba(0, 0, 0, 0.05);
  align-items: center;
  justify-content: center;
  width: 25%;
  font-size: 24px;
  color: rgba(0, 0, 0, 0.5);
  height: 20%;
  min-width: 25%;
}

.Button[data-size="2"] {
  height: 40%;
}

.Button[data-value="null"] {
  pointer-events: none;
}

.Button:active {
  background: #bdc7b7;
}

App.js:

import React, { Component } from 'react'
import update from 'immutability-helper'
import math from 'mathjs'
import './App.css'
import Display from './Display'
import Button from './Button'
import Buttons from './Buttons'

class App extends Component {
  constructor() {
    super()
    this.state = { operations: [] }
  }

  calculateOperations = () => {
    let result = this.state.operations.join('')
    if (result) {
      result = math.eval(result)
      result = math.format(result, { precision: 14 })
      this.setState({
        operations: [result],
      })
    }
  }
  handleClick = e => {
    const value = e.target.getAttribute('data-value')
    switch (value) {
      case 'clear':
        this.setState({
          operations: [],
        })
        break
      case 'equal':
        this.calculateOperations()
        break
      default:
        const newOperations = update(this.state.operations, {
          $push: [value],
        })
        this.setState({
          operations: newOperations,
        })
        break
    }
  }
  onKeyPress = e => {
    const value = e.key;

    const allowed = [
      '1', '2', '3', '4',
      '5', '6', '7', '8',
      '9', '0', '+', '-', '*', '/', '=', '.',
      'Enter', 'equal', 'Escape', 'C',
      'Backspace'
    ];

    if (allowed.includes(value)) {
      switch (value) {
        case 'Escape':
          this.setState({
            operations: [],
          })
          break
        case 'Backspace':
          const backSpaceOperations = this.state.operations;
          backSpaceOperations.pop()
          this.setState({
            operations: backSpaceOperations,
          })
          break
        case '=':
        case 'Enter':
          this.calculateOperations()
          break
        default:
          const newOperations = update(this.state.operations, {
            $push: [value],
          })
          this.setState({
            operations: newOperations,
          })
          break
      }
    }
  }

  componentWillMount = (e) => {
    document.addEventListener("keydown", this.onKeyPress.bind(this));
  }

  render() {
    return (
      <div className="App">

        <Display data={this.state.operations} />
        <Buttons>
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="C" value="clear" />
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="7" value="7" />
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="4" value="4" />
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="1" value="1" />
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="0" value="0" />

          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="/" value="/" />
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="8" value="8" />
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="5" value="5" />
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="2" value="2" />
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="." value="." />

          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="x" value="*" />
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="9" value="9" />
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="6" value="6" />
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="3" value="3" />
          <Button label="" value="null" />

          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="-" value="-" />
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="+" size="2" value="+" />
          <Button onClick={this.handleClick} onKeyPress={this.onKeyPress} label="=" size="2" value="equal" />
        </Buttons>
      </div>
    )
  }
}

export default App

Index.js:

import React from 'react'
import { render } from 'react-dom'
import App from './App'

render(<App />, document.getElementById('root'))

Display.js:

import React, { Component } from 'react'
class Display extends Component {
  render() {
    const string = this.props.data.join('')
    return <div className="Display"> {string} </div>
  }
}
export default Display

Button.js:

import React, { Component } from 'react'
class Button extends Component {
  render() {
    return (
      <div
        onClick={this.props.onClick}
        className="Button"
        data-size={this.props.size}
        data-value={this.props.value}
      >
        {this.props.label}
      </div>
    )
  }
}

export default Button

Buttons.js:

import React, { Component } from 'react'

class Buttons extends Component {
  render() {
    return <div className="Buttons"> {this.props.children} </div>
  }
}
export default Buttons

npm init

npm start